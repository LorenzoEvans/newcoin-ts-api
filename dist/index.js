/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NCO_BlockchainAPI = void 0;\n// EOS imports\nconst eosjs_1 = __webpack_require__(/*! eosjs */ \"eosjs\");\nconst eosjs_jssig_1 = __webpack_require__(/*! eosjs/dist/eosjs-jssig */ \"eosjs/dist/eosjs-jssig\"); // development only\n// @ts-ignore\nconst eosjs_ecc_priveos_1 = __importDefault(__webpack_require__(/*! eosjs-ecc-priveos */ \"eosjs-ecc-priveos\"));\n// Extra backend services\nconst hyperion_1 = __webpack_require__(/*! @eoscafe/hyperion */ \"@eoscafe/hyperion\");\nconst atomicassets_1 = __webpack_require__(/*! atomicassets */ \"atomicassets\");\n// Newcoin services  \nconst newcoin_pools_js_1 = __webpack_require__(/*! @newcoin-foundation/newcoin.pools-js/ */ \"@newcoin-foundation/newcoin.pools-js/\");\n//import { RpcApi } from \"newcoinfarm\";\n// @ts-ignore\n// import * as node_fetch from 'node-fetch';\nconst cross_fetch_1 = __importDefault(__webpack_require__(/*! cross-fetch */ \"cross-fetch\"));\nconst types_1 = __webpack_require__(/*! ./types */ \"./src/types.ts\");\n__exportStar(__webpack_require__(/*! ./types */ \"./src/types.ts\"), exports);\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/utils.ts\");\nconst api = new atomicassets_1.ExplorerApi(\"https://atomic-api.newcoin.org/\", \"atomicassets\", { fetch: cross_fetch_1.default });\nconst _newaccount = (new_name, payer, newacc_public_active_key, newacc_public_owner_key) => ({\n    account: 'eosio',\n    name: 'newaccount',\n    authorization: [{\n            actor: payer,\n            permission: 'active',\n        }],\n    data: {\n        creator: payer,\n        name: new_name,\n        owner: {\n            threshold: 1,\n            keys: [{\n                    key: newacc_public_owner_key,\n                    weight: 1\n                }],\n            accounts: [],\n            waits: []\n        },\n        active: {\n            threshold: 1,\n            keys: [{\n                    key: newacc_public_active_key,\n                    weight: 1\n                }],\n            accounts: [],\n            waits: []\n        },\n    }\n});\nconst _buyrambytes = (receiver, payer = 'io', amt = 8192) => ({\n    account: 'eosio',\n    name: 'buyrambytes',\n    authorization: [{ actor: payer, permission: 'active' }],\n    data: {\n        payer: payer,\n        receiver: receiver,\n        bytes: amt,\n    },\n});\nconst _delegateBw = (receiver, payer = 'io', net_amount = '100.0000 NCO', cpu_amount = '100.0000 NCO', trfer = true) => ({\n    account: 'eosio',\n    name: 'delegatebw',\n    authorization: [{\n            actor: payer,\n            permission: 'active',\n        }],\n    data: {\n        from: payer,\n        receiver: receiver,\n        stake_net_quantity: net_amount,\n        stake_cpu_quantity: cpu_amount,\n        transfer: trfer,\n    }\n});\nconst _createUser = (newUser, payer, public_active_key, public_owner_key) => __awaiter(void 0, void 0, void 0, function* () {\n    let newacc_action = _newaccount(newUser, payer, public_active_key, public_owner_key);\n    let buyram_action = _buyrambytes(newUser, payer);\n    let delegatebw_action = _delegateBw(newUser, payer);\n    return [newacc_action, buyram_action, delegatebw_action];\n});\nconst _createCollection = (author, collection_name, authorized_accounts, notify_accounts = [], market_fee, allow_notify) => {\n    const action = {\n        account: 'atomicassets',\n        name: 'createcol',\n        data: {\n            author: author,\n            collection_name: collection_name,\n            allow_notify: allow_notify,\n            authorized_accounts: authorized_accounts,\n            notify_accounts: notify_accounts,\n            market_fee: market_fee,\n            data: []\n        },\n        authorization: [\n            { actor: author, permission: 'active' }\n        ]\n    };\n    return action;\n};\nconst _createSch = (author, payer, collection_name, schema_name, sch) => {\n    const action = {\n        account: 'atomicassets',\n        name: 'createschema',\n        data: {\n            authorized_creator: author,\n            collection_name: collection_name,\n            schema_name: schema_name,\n            schema_format: sch\n        },\n        authorization: [\n            { actor: author, permission: 'active' }\n        ]\n    };\n    return action;\n};\nconst _createTmpl = (author, collection_name, schema_name, xferable, burnable, max_supply, template_fields) => {\n    const action = {\n        account: 'atomicassets',\n        name: 'createtempl',\n        data: {\n            authorized_creator: author,\n            collection_name: collection_name,\n            schema_name: schema_name,\n            transferable: xferable,\n            burnable: burnable,\n            max_supply: 0xffffff,\n            immutable_data: template_fields //{key: 'name', value: ['string', 'default'] } ]\n        },\n        authorization: [\n            { actor: author, permission: 'active' }\n        ]\n    };\n    return action;\n};\nconst _createPermission = (author, perm_name, perm_key) => {\n    const authorization_object = {\n        threshold: 1,\n        accounts: [{ permission: { actor: author, permission: 'active' }, weight: 1 }],\n        keys: [{ key: perm_key, weight: 1 }],\n        waits: []\n    };\n    const updateauth_input = {\n        account: author,\n        permission: perm_name,\n        parent: 'active',\n        auth: authorization_object\n    };\n    const action = {\n        account: 'eosio',\n        name: 'updateauth',\n        data: updateauth_input,\n        authorization: [\n            { actor: author, permission: 'active' }\n        ]\n    };\n    return action;\n};\nconst _mintAsset = (author, payer, col_name, sch_name, tmpl_id, immutable_data, mutable_data) => {\n    const action = {\n        account: 'atomicassets',\n        name: 'mintasset',\n        data: {\n            authorized_minter: author,\n            collection_name: col_name,\n            schema_name: sch_name,\n            template_id: tmpl_id,\n            new_asset_owner: author,\n            immutable_data: immutable_data,\n            mutable_data: mutable_data,\n            tokens_to_back: [] //tokens to back \n        },\n        authorization: [\n            { actor: author, permission: 'active' }\n        ]\n    };\n    return action;\n};\nconst _createPool = (creator, payer, descr = creator + ' pool') => {\n    const action = {\n        account: 'pools.nco',\n        name: 'createpool',\n        data: {\n            owner: creator,\n            description: descr,\n        },\n        authorization: [\n            { actor: creator, permission: 'active' }\n        ]\n    };\n    return action;\n};\nconst _stakeToPool = (from, id, amt) => {\n    const action = {\n        account: 'eosio.token',\n        name: 'transfer',\n        data: {\n            from: from,\n            to: 'pools.nco',\n            quantity: amt,\n            memo: \"pool:\" + id //'pool:1'\n        },\n        authorization: [\n            { 'actor': from, 'permission': 'active' }\n        ]\n    };\n    return action;\n};\nconst _txNcoBalance = (from, to, amt, memo = '') => {\n    const action = {\n        account: 'eosio.token',\n        name: 'transfer',\n        data: {\n            from: from,\n            to: to,\n            quantity: amt,\n            memo: memo //''\n        },\n        authorization: [\n            { 'actor': from, 'permission': 'active' }\n        ]\n    };\n    return action;\n};\nconst SubmitTx = (actions, public_keys, // testnet [\"EOS5PU92CupzxWEuvTMcCNr3G69r4Vch3bmYDrczNSHx5LbNRY7NT\"]\nprivate_keys, // testnet [\"5KdRwMUrkFssK2nUXASnhzjsN1rNNiy8bXAJoHYbBgJMLzjiXHV\"]\nnet_url = 'https://testnet.newcoin.org') => __awaiter(void 0, void 0, void 0, function* () {\n    const signatureProvider = new eosjs_jssig_1.JsSignatureProvider(private_keys);\n    signatureProvider.availableKeys = public_keys;\n    //@ts-ignore\n    const rpc = new eosjs_1.JsonRpc(net_url, { fetch: cross_fetch_1.default }); //required to read blockchain state\n    const api = new eosjs_1.Api({ rpc, signatureProvider }); //required to submit transactions\n    const info = yield rpc.get_info();\n    const lastBlockInfo = yield rpc.get_block(info.last_irreversible_block_num);\n    const tzOff = new Date(info.head_block_time).getTimezoneOffset();\n    var t = new Date((new Date(info.head_block_time)).getTime() + 10 * 60 * 1000 - tzOff * 1000 * 60).toISOString().slice(0, -1); //+10m\n    const transactionObj = {\n        actions: actions,\n        expiration: t,\n        ref_block_prefix: lastBlockInfo.ref_block_prefix,\n        ref_block_num: lastBlockInfo.block_num & 0xffff, // 22774\n    };\n    const a = yield api.serializeActions(transactionObj.actions);\n    const transaction = Object.assign(Object.assign({}, transactionObj), { actions: a });\n    const serializedTransaction = api.serializeTransaction(transaction);\n    const availableKeys = yield api.signatureProvider.getAvailableKeys();\n    const requiredKeys = yield api.authorityProvider.getRequiredKeys({ transaction, availableKeys });\n    const abis = yield api.getTransactionAbis(transaction);\n    // const pushTransactionArgs: PushTransactionArgs = { serializedTransaction, signatures };\n    const pushTransactionArgs = yield api.signatureProvider.sign({\n        chainId: info.chain_id,\n        requiredKeys: requiredKeys,\n        serializedTransaction: serializedTransaction,\n        serializedContextFreeData: undefined,\n        abis: abis\n    });\n    /*\n    let tr  = serializedTransaction.buffer.toString();\n    let eccst = ecc.sign(serializedTransaction, private_keys[0]);\n    let pub_from_prv = ecc.privateToPublic(private_keys[0]);\n    let sig = pushTransactionArgs.signatures[0];\n    let key = ecc.recover(sig, tr);\n    let c = ecc.verify(sig, tr, public_keys[0]);\n    console.log(\"signature verification: return %d\", c)*/\n    return api.pushSignedTransaction(pushTransactionArgs);\n});\nconst CREATE_ACCOUNT_DEFAULTS = {\n    ram_amt: 8192,\n    cpu_amount: '100.0000 NCO',\n    net_amount: '100.0000 NCO',\n    xfer: false,\n};\n/**\n * The primary tool to interact with [https://newcoin.org](newcoin.org).\n *\n * This is an early alpha.\n *\n * See [https://docs.newcoin.org/](https://docs.newcoin.org/) for an overview of the newcoin ecosystem.\n */\nclass NCO_BlockchainAPI {\n    /**\n     * Init the api\n     * @name newcoin-api\n     * @param bc_url - newcoin url - http://testnet.newcoin.org\n     * @param hyp_url - hyperion url - http://hyperion.newcoin.org\n     * @returns a Newcoin API instance\n     */\n    constructor({ bc_url, hyp_url }) {\n        /** @internal */\n        this._url = \"\";\n        /** @internal */\n        this._h_url = \"\";\n        this._url = bc_url;\n        this._h_url = hyp_url;\n    }\n    /**\n     * Create a key pair assuming a secure environment (not frontend)\n     * @returns A key pair\n     */\n    createKeyPair() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield eosjs_ecc_priveos_1.default.initialize();\n            let opts = { secureEnv: true };\n            let p = yield eosjs_ecc_priveos_1.default.randomKey(0, opts);\n            //let x = ecc.isValidPrivate(p);\n            let t = { prv_key: p, pub_key: eosjs_ecc_priveos_1.default.privateToPublic(p) };\n            return t;\n        });\n    }\n    /**\n     * Create a user\n     * @returns Create User transaction id\n     */\n    createUser(inpt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { newUser, newacc_pub_active_key, newacc_pub_owner_key, payer, payer_prv_key, ram_amt, net_amount, cpu_amount, xfer } = Object.assign(Object.assign({}, CREATE_ACCOUNT_DEFAULTS), inpt);\n            let t;\n            let res = {};\n            let tres;\n            let newacc_action = _newaccount(newUser, payer, newacc_pub_active_key, newacc_pub_owner_key);\n            let buyram_action = _buyrambytes(newUser, payer, ram_amt);\n            let delegatebw_action = _delegateBw(newUser, payer, net_amount, cpu_amount, xfer);\n            let payer_pub_key = eosjs_ecc_priveos_1.default.privateToPublic(payer_prv_key);\n            console.log(\"before create account transaction\");\n            tres = (yield SubmitTx([newacc_action, buyram_action, delegatebw_action], [payer_pub_key], [payer_prv_key], this._url)); // [] contained      \n            res.TxID_createAcc = tres.transaction_id;\n            console.log(\"createuser transaction complete\");\n            return res;\n        });\n    }\n    /**\n     * Create collection\n     * @returns Create Collection and template transactions' ids\n     */\n    createCollection(inpt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let t;\n            let res = {};\n            let tres;\n            let d = 12 - inpt.user.length;\n            if (inpt.collection_name == undefined)\n                inpt.collection_name = (0, utils_1.normalizeUsername)(inpt.user, \"z\"); //(inpt.creator).replace('.', 'z' + 'z'.repeat(d));\n            if (inpt.schema_name == undefined)\n                inpt.schema_name = (0, utils_1.normalizeUsername)(inpt.user, \"w\"); // (inpt.creator).replace('.', 'w' + 'w'.repeat(d));\n            let user_public_active_key = eosjs_ecc_priveos_1.default.privateToPublic(inpt.user_prv_active_key);\n            let mkt_fee = inpt.mkt_fee ? inpt.mkt_fee : 0.05;\n            let allow_notify = inpt.allow_notify ? inpt.allow_notify : true;\n            t = _createCollection(inpt.user, inpt.collection_name, [inpt.user], [inpt.user], mkt_fee, allow_notify);\n            console.log(t);\n            console.log(\"createcol transaction\");\n            tres = (yield SubmitTx([t], [user_public_active_key], [inpt.user_prv_active_key], this._url));\n            res.TxID_createCol = tres.transaction_id;\n            console.log(\"creating schema\");\n            let schema_fields = inpt.schema_fields ? inpt.schema_fields : types_1.default_schema;\n            t = _createSch(inpt.user, inpt.user, inpt.collection_name, inpt.schema_name, schema_fields);\n            console.log(t);\n            console.log(\"createsch transaction\");\n            tres = (yield SubmitTx([t], [user_public_active_key], [inpt.user_prv_active_key], this._url));\n            res.TxID_createSch = tres.transaction_id;\n            console.log(\"creating template\");\n            let template = inpt.template_fields ? inpt.template_fields : [];\n            let xferable = inpt.xferable ? inpt.xferable : true;\n            let burnable = inpt.burnable ? inpt.burnable : true;\n            let max_supply = inpt.max_supply ? inpt.max_supply : 0xffffff;\n            t = _createTmpl(inpt.user, inpt.collection_name, inpt.schema_name, xferable, burnable, max_supply, template);\n            console.log(t);\n            console.log(\"creating template transaction\");\n            tres = (yield SubmitTx([t], [user_public_active_key], [inpt.user_prv_active_key], this._url));\n            res.TxID_createTpl = res.TxID_createTpl;\n            return res;\n        });\n    }\n    /**\n     * Create a new permission subject to Active permission.\n     * @returns Create permission transaction id\n     */\n    createPermission(inpt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let t = _createPermission(inpt.author, inpt.perm_name, inpt.perm_pub_key);\n            let res = yield SubmitTx([t], [eosjs_ecc_priveos_1.default.privateToPublic(inpt.author_prv_active_key)], [inpt.author_prv_active_key], this._url);\n            let r = {};\n            r.TxID_createPerm = res.transaction_id;\n            return r;\n        });\n    }\n    /**\n     * Link a permission to a specific action of a specific contract.\n     * @returns Link permission transaction id\n     */\n    linkPermission(inpt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const linkauth_input = {\n                account: inpt.author,\n                code: inpt.action_owner,\n                type: inpt.action_to_link,\n                requirement: inpt.perm_to_link, // 'active', 'owner' ... \n            };\n            // the action which will make the linking \n            let action = {\n                account: 'eosio',\n                name: 'linkauth',\n                data: linkauth_input,\n                authorization: [{\n                        actor: inpt.author,\n                        permission: 'active'\n                    }]\n            };\n            let res = yield SubmitTx([action], [eosjs_ecc_priveos_1.default.privateToPublic(inpt.author_prv_active_key)], [inpt.author_prv_active_key], this._url);\n            let r = {};\n            r.TxID_linkPerm = res.transaction_id;\n            return r;\n        });\n    }\n    /**\n     * Create a staking pool.\n     * @returns Create Pool transaction id\n     */\n    createPool(inpt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let t = _createPool(inpt.owner, \"test pool for \" + inpt.owner);\n            let res = yield SubmitTx([t], [eosjs_ecc_priveos_1.default.privateToPublic(inpt.owner_prv_active_key)], [inpt.owner_prv_active_key], this._url);\n            let r = {};\n            r.TxID_createPool = res.transaction_id;\n            return r;\n        });\n    }\n    /**\n     * Stake to pool\n     * @returns Create Pool transaction id\n     */\n    stakeToPool(inpt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const api = new newcoin_pools_js_1.RpcApi(this._url, \"pools.nco\", cross_fetch_1.default);\n            let p = { owner: inpt.to };\n            let r = {};\n            console.log(\"Get poolbyowner: \", JSON.stringify(p));\n            let q = yield api.getPoolByOwner(p);\n            let t = yield q.json();\n            let pool_id = t.rows[0].id;\n            console.log(\"pool:\" + JSON.stringify(t));\n            let tx = _stakeToPool(inpt.payer, pool_id, inpt.amt);\n            let res = yield SubmitTx([tx], [eosjs_ecc_priveos_1.default.privateToPublic(inpt.payer_prv_key)], [inpt.payer_prv_key], this._url);\n            r.TxID_stakeToPool = res.transaction_id;\n            //console.log(res);\n            return r;\n        });\n    }\n    /**\n     * Mint an asset\n     * @returns Create Pool transaction id\n     */\n    mintAsset(inpt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let d = 12 - inpt.creator.length;\n            if (inpt.col_name == undefined)\n                inpt.col_name = (0, utils_1.normalizeUsername)(inpt.creator, \"z\"); //(inpt.creator).replace('.', 'z' + 'z'.repeat(d));\n            if (inpt.sch_name == undefined)\n                inpt.sch_name = (0, utils_1.normalizeUsername)(inpt.creator, \"w\"); // (inpt.creator).replace('.', 'w' + 'w'.repeat(d));\n            if (inpt.tmpl_id == undefined)\n                inpt.tmpl_id = -1;\n            if (inpt.immutable_data == undefined)\n                inpt.immutable_data = [\n                    { key: 'name', value: ['string', inpt.creator + '_' + (new Date()).getTime()] }\n                ];\n            if (inpt.mutable_data == undefined)\n                inpt.mutable_data = [];\n            const t = _mintAsset(inpt.creator, inpt.payer, inpt.col_name, inpt.sch_name, inpt.tmpl_id, inpt.immutable_data, inpt.mutable_data);\n            let res = yield SubmitTx([t], [eosjs_ecc_priveos_1.default.privateToPublic(inpt.payer_prv_key)], [inpt.payer_prv_key], this._url);\n            let r = {};\n            r.TxID_mintAsset = res.transaction_id;\n            return r;\n        });\n    }\n    /**\n     * Get trasaction data\n     * @returns Tx data\n     */\n    getTxData(txid) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const hrpc = new hyperion_1.JsonRpc(this._h_url, { fetch: cross_fetch_1.default });\n            let txi = yield hrpc.get_transaction(txid);\n            console.log(txi); // get template number  txi.actions[1].act.data.template_id\n            return txi;\n        });\n    }\n    /**\n     * Get account balance\n     * @returns Tx data\n     */\n    getAccountBalance(acc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (acc.contract == undefined)\n                acc.contract = 'eosio.token';\n            let rc = { acc_balances: [] };\n            try {\n                let t = yield (0, cross_fetch_1.default)(`https://testnet.newcoin.org/v1/chain/get_currency_balance`, {\n                    method: \"POST\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify({\n                        account: acc.owner,\n                        code: acc.contract\n                    }),\n                });\n                rc.acc_balances = yield t.json();\n                //console.log(rc);\n                return rc;\n            }\n            catch (e) {\n                console.log('\\nCaught exception: ' + e);\n                if (e instanceof eosjs_1.RpcError)\n                    console.log(JSON.stringify(e.json, null, 2));\n            }\n        });\n    }\n    /**\n     * Transfer NCO between accounts\n     * @returns Transfer transaction id\n     */\n    txNcoBalance(inpt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let r = {};\n            let tx = _txNcoBalance(inpt.payer, inpt.to, inpt.amt);\n            let res = yield SubmitTx([tx], [inpt.payer_pub_key], [inpt.payer_prv_key], this._url);\n            r.TxID_txNcoBalance = res.transaction_id;\n            //console.log(res);\n            return r;\n        });\n    }\n    /**\n     * Get pool info\n     * @returns Tx data\n     */\n    getPoolInfo(payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const api = new newcoin_pools_js_1.RpcApi(\"https://testnet.newcoin.org\", \"pools.nco\", cross_fetch_1.default);\n            try {\n                const fn = payload.code ? \"getPoolByCode\" : \"getPoolByOwner\";\n                let q = yield api[fn](payload);\n                let t = yield q.json();\n                //console.log(t.rows[0]);\n                //console.log(t.rows[0].total);\n                return t;\n            }\n            catch (e) {\n                console.log('\\nCaught exception: ' + e);\n                if (e instanceof eosjs_1.RpcError)\n                    console.log(JSON.stringify(e.json, null, 2));\n            }\n            return {};\n            ``;\n        });\n    }\n}\nexports.NCO_BlockchainAPI = NCO_BlockchainAPI;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXgudHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9OQ09fQmxvY2tjaGFpbkFQSS8uL3NyYy9pbmRleC50cz81MmY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTkNPX0Jsb2NrY2hhaW5BUEkgPSB2b2lkIDA7XG4vLyBFT1MgaW1wb3J0c1xuY29uc3QgZW9zanNfMSA9IHJlcXVpcmUoXCJlb3Nqc1wiKTtcbmNvbnN0IGVvc2pzX2pzc2lnXzEgPSByZXF1aXJlKFwiZW9zanMvZGlzdC9lb3Nqcy1qc3NpZ1wiKTsgLy8gZGV2ZWxvcG1lbnQgb25seVxuLy8gQHRzLWlnbm9yZVxuY29uc3QgZW9zanNfZWNjX3ByaXZlb3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZW9zanMtZWNjLXByaXZlb3NcIikpO1xuLy8gRXh0cmEgYmFja2VuZCBzZXJ2aWNlc1xuY29uc3QgaHlwZXJpb25fMSA9IHJlcXVpcmUoXCJAZW9zY2FmZS9oeXBlcmlvblwiKTtcbmNvbnN0IGF0b21pY2Fzc2V0c18xID0gcmVxdWlyZShcImF0b21pY2Fzc2V0c1wiKTtcbi8vIE5ld2NvaW4gc2VydmljZXMgIFxuY29uc3QgbmV3Y29pbl9wb29sc19qc18xID0gcmVxdWlyZShcIkBuZXdjb2luLWZvdW5kYXRpb24vbmV3Y29pbi5wb29scy1qcy9cIik7XG4vL2ltcG9ydCB7IFJwY0FwaSB9IGZyb20gXCJuZXdjb2luZmFybVwiO1xuLy8gQHRzLWlnbm9yZVxuLy8gaW1wb3J0ICogYXMgbm9kZV9mZXRjaCBmcm9tICdub2RlLWZldGNoJztcbmNvbnN0IGNyb3NzX2ZldGNoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNyb3NzLWZldGNoXCIpKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBhcGkgPSBuZXcgYXRvbWljYXNzZXRzXzEuRXhwbG9yZXJBcGkoXCJodHRwczovL2F0b21pYy1hcGkubmV3Y29pbi5vcmcvXCIsIFwiYXRvbWljYXNzZXRzXCIsIHsgZmV0Y2g6IGNyb3NzX2ZldGNoXzEuZGVmYXVsdCB9KTtcbmNvbnN0IF9uZXdhY2NvdW50ID0gKG5ld19uYW1lLCBwYXllciwgbmV3YWNjX3B1YmxpY19hY3RpdmVfa2V5LCBuZXdhY2NfcHVibGljX293bmVyX2tleSkgPT4gKHtcbiAgICBhY2NvdW50OiAnZW9zaW8nLFxuICAgIG5hbWU6ICduZXdhY2NvdW50JyxcbiAgICBhdXRob3JpemF0aW9uOiBbe1xuICAgICAgICAgICAgYWN0b3I6IHBheWVyLFxuICAgICAgICAgICAgcGVybWlzc2lvbjogJ2FjdGl2ZScsXG4gICAgICAgIH1dLFxuICAgIGRhdGE6IHtcbiAgICAgICAgY3JlYXRvcjogcGF5ZXIsXG4gICAgICAgIG5hbWU6IG5ld19uYW1lLFxuICAgICAgICBvd25lcjoge1xuICAgICAgICAgICAgdGhyZXNob2xkOiAxLFxuICAgICAgICAgICAga2V5czogW3tcbiAgICAgICAgICAgICAgICAgICAga2V5OiBuZXdhY2NfcHVibGljX293bmVyX2tleSxcbiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAxXG4gICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBhY2NvdW50czogW10sXG4gICAgICAgICAgICB3YWl0czogW11cbiAgICAgICAgfSxcbiAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgICB0aHJlc2hvbGQ6IDEsXG4gICAgICAgICAgICBrZXlzOiBbe1xuICAgICAgICAgICAgICAgICAgICBrZXk6IG5ld2FjY19wdWJsaWNfYWN0aXZlX2tleSxcbiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAxXG4gICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBhY2NvdW50czogW10sXG4gICAgICAgICAgICB3YWl0czogW11cbiAgICAgICAgfSxcbiAgICB9XG59KTtcbmNvbnN0IF9idXlyYW1ieXRlcyA9IChyZWNlaXZlciwgcGF5ZXIgPSAnaW8nLCBhbXQgPSA4MTkyKSA9PiAoe1xuICAgIGFjY291bnQ6ICdlb3NpbycsXG4gICAgbmFtZTogJ2J1eXJhbWJ5dGVzJyxcbiAgICBhdXRob3JpemF0aW9uOiBbeyBhY3RvcjogcGF5ZXIsIHBlcm1pc3Npb246ICdhY3RpdmUnIH1dLFxuICAgIGRhdGE6IHtcbiAgICAgICAgcGF5ZXI6IHBheWVyLFxuICAgICAgICByZWNlaXZlcjogcmVjZWl2ZXIsXG4gICAgICAgIGJ5dGVzOiBhbXQsXG4gICAgfSxcbn0pO1xuY29uc3QgX2RlbGVnYXRlQncgPSAocmVjZWl2ZXIsIHBheWVyID0gJ2lvJywgbmV0X2Ftb3VudCA9ICcxMDAuMDAwMCBOQ08nLCBjcHVfYW1vdW50ID0gJzEwMC4wMDAwIE5DTycsIHRyZmVyID0gdHJ1ZSkgPT4gKHtcbiAgICBhY2NvdW50OiAnZW9zaW8nLFxuICAgIG5hbWU6ICdkZWxlZ2F0ZWJ3JyxcbiAgICBhdXRob3JpemF0aW9uOiBbe1xuICAgICAgICAgICAgYWN0b3I6IHBheWVyLFxuICAgICAgICAgICAgcGVybWlzc2lvbjogJ2FjdGl2ZScsXG4gICAgICAgIH1dLFxuICAgIGRhdGE6IHtcbiAgICAgICAgZnJvbTogcGF5ZXIsXG4gICAgICAgIHJlY2VpdmVyOiByZWNlaXZlcixcbiAgICAgICAgc3Rha2VfbmV0X3F1YW50aXR5OiBuZXRfYW1vdW50LFxuICAgICAgICBzdGFrZV9jcHVfcXVhbnRpdHk6IGNwdV9hbW91bnQsXG4gICAgICAgIHRyYW5zZmVyOiB0cmZlcixcbiAgICB9XG59KTtcbmNvbnN0IF9jcmVhdGVVc2VyID0gKG5ld1VzZXIsIHBheWVyLCBwdWJsaWNfYWN0aXZlX2tleSwgcHVibGljX293bmVyX2tleSkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgbGV0IG5ld2FjY19hY3Rpb24gPSBfbmV3YWNjb3VudChuZXdVc2VyLCBwYXllciwgcHVibGljX2FjdGl2ZV9rZXksIHB1YmxpY19vd25lcl9rZXkpO1xuICAgIGxldCBidXlyYW1fYWN0aW9uID0gX2J1eXJhbWJ5dGVzKG5ld1VzZXIsIHBheWVyKTtcbiAgICBsZXQgZGVsZWdhdGVid19hY3Rpb24gPSBfZGVsZWdhdGVCdyhuZXdVc2VyLCBwYXllcik7XG4gICAgcmV0dXJuIFtuZXdhY2NfYWN0aW9uLCBidXlyYW1fYWN0aW9uLCBkZWxlZ2F0ZWJ3X2FjdGlvbl07XG59KTtcbmNvbnN0IF9jcmVhdGVDb2xsZWN0aW9uID0gKGF1dGhvciwgY29sbGVjdGlvbl9uYW1lLCBhdXRob3JpemVkX2FjY291bnRzLCBub3RpZnlfYWNjb3VudHMgPSBbXSwgbWFya2V0X2ZlZSwgYWxsb3dfbm90aWZ5KSA9PiB7XG4gICAgY29uc3QgYWN0aW9uID0ge1xuICAgICAgICBhY2NvdW50OiAnYXRvbWljYXNzZXRzJyxcbiAgICAgICAgbmFtZTogJ2NyZWF0ZWNvbCcsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGF1dGhvcjogYXV0aG9yLFxuICAgICAgICAgICAgY29sbGVjdGlvbl9uYW1lOiBjb2xsZWN0aW9uX25hbWUsXG4gICAgICAgICAgICBhbGxvd19ub3RpZnk6IGFsbG93X25vdGlmeSxcbiAgICAgICAgICAgIGF1dGhvcml6ZWRfYWNjb3VudHM6IGF1dGhvcml6ZWRfYWNjb3VudHMsXG4gICAgICAgICAgICBub3RpZnlfYWNjb3VudHM6IG5vdGlmeV9hY2NvdW50cyxcbiAgICAgICAgICAgIG1hcmtldF9mZWU6IG1hcmtldF9mZWUsXG4gICAgICAgICAgICBkYXRhOiBbXVxuICAgICAgICB9LFxuICAgICAgICBhdXRob3JpemF0aW9uOiBbXG4gICAgICAgICAgICB7IGFjdG9yOiBhdXRob3IsIHBlcm1pc3Npb246ICdhY3RpdmUnIH1cbiAgICAgICAgXVxuICAgIH07XG4gICAgcmV0dXJuIGFjdGlvbjtcbn07XG5jb25zdCBfY3JlYXRlU2NoID0gKGF1dGhvciwgcGF5ZXIsIGNvbGxlY3Rpb25fbmFtZSwgc2NoZW1hX25hbWUsIHNjaCkgPT4ge1xuICAgIGNvbnN0IGFjdGlvbiA9IHtcbiAgICAgICAgYWNjb3VudDogJ2F0b21pY2Fzc2V0cycsXG4gICAgICAgIG5hbWU6ICdjcmVhdGVzY2hlbWEnLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBhdXRob3JpemVkX2NyZWF0b3I6IGF1dGhvcixcbiAgICAgICAgICAgIGNvbGxlY3Rpb25fbmFtZTogY29sbGVjdGlvbl9uYW1lLFxuICAgICAgICAgICAgc2NoZW1hX25hbWU6IHNjaGVtYV9uYW1lLFxuICAgICAgICAgICAgc2NoZW1hX2Zvcm1hdDogc2NoXG4gICAgICAgIH0sXG4gICAgICAgIGF1dGhvcml6YXRpb246IFtcbiAgICAgICAgICAgIHsgYWN0b3I6IGF1dGhvciwgcGVybWlzc2lvbjogJ2FjdGl2ZScgfVxuICAgICAgICBdXG4gICAgfTtcbiAgICByZXR1cm4gYWN0aW9uO1xufTtcbmNvbnN0IF9jcmVhdGVUbXBsID0gKGF1dGhvciwgY29sbGVjdGlvbl9uYW1lLCBzY2hlbWFfbmFtZSwgeGZlcmFibGUsIGJ1cm5hYmxlLCBtYXhfc3VwcGx5LCB0ZW1wbGF0ZV9maWVsZHMpID0+IHtcbiAgICBjb25zdCBhY3Rpb24gPSB7XG4gICAgICAgIGFjY291bnQ6ICdhdG9taWNhc3NldHMnLFxuICAgICAgICBuYW1lOiAnY3JlYXRldGVtcGwnLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBhdXRob3JpemVkX2NyZWF0b3I6IGF1dGhvcixcbiAgICAgICAgICAgIGNvbGxlY3Rpb25fbmFtZTogY29sbGVjdGlvbl9uYW1lLFxuICAgICAgICAgICAgc2NoZW1hX25hbWU6IHNjaGVtYV9uYW1lLFxuICAgICAgICAgICAgdHJhbnNmZXJhYmxlOiB4ZmVyYWJsZSxcbiAgICAgICAgICAgIGJ1cm5hYmxlOiBidXJuYWJsZSxcbiAgICAgICAgICAgIG1heF9zdXBwbHk6IDB4ZmZmZmZmLFxuICAgICAgICAgICAgaW1tdXRhYmxlX2RhdGE6IHRlbXBsYXRlX2ZpZWxkcyAvL3trZXk6ICduYW1lJywgdmFsdWU6IFsnc3RyaW5nJywgJ2RlZmF1bHQnXSB9IF1cbiAgICAgICAgfSxcbiAgICAgICAgYXV0aG9yaXphdGlvbjogW1xuICAgICAgICAgICAgeyBhY3RvcjogYXV0aG9yLCBwZXJtaXNzaW9uOiAnYWN0aXZlJyB9XG4gICAgICAgIF1cbiAgICB9O1xuICAgIHJldHVybiBhY3Rpb247XG59O1xuY29uc3QgX2NyZWF0ZVBlcm1pc3Npb24gPSAoYXV0aG9yLCBwZXJtX25hbWUsIHBlcm1fa2V5KSA9PiB7XG4gICAgY29uc3QgYXV0aG9yaXphdGlvbl9vYmplY3QgPSB7XG4gICAgICAgIHRocmVzaG9sZDogMSxcbiAgICAgICAgYWNjb3VudHM6IFt7IHBlcm1pc3Npb246IHsgYWN0b3I6IGF1dGhvciwgcGVybWlzc2lvbjogJ2FjdGl2ZScgfSwgd2VpZ2h0OiAxIH1dLFxuICAgICAgICBrZXlzOiBbeyBrZXk6IHBlcm1fa2V5LCB3ZWlnaHQ6IDEgfV0sXG4gICAgICAgIHdhaXRzOiBbXVxuICAgIH07XG4gICAgY29uc3QgdXBkYXRlYXV0aF9pbnB1dCA9IHtcbiAgICAgICAgYWNjb3VudDogYXV0aG9yLFxuICAgICAgICBwZXJtaXNzaW9uOiBwZXJtX25hbWUsXG4gICAgICAgIHBhcmVudDogJ2FjdGl2ZScsXG4gICAgICAgIGF1dGg6IGF1dGhvcml6YXRpb25fb2JqZWN0XG4gICAgfTtcbiAgICBjb25zdCBhY3Rpb24gPSB7XG4gICAgICAgIGFjY291bnQ6ICdlb3NpbycsXG4gICAgICAgIG5hbWU6ICd1cGRhdGVhdXRoJyxcbiAgICAgICAgZGF0YTogdXBkYXRlYXV0aF9pbnB1dCxcbiAgICAgICAgYXV0aG9yaXphdGlvbjogW1xuICAgICAgICAgICAgeyBhY3RvcjogYXV0aG9yLCBwZXJtaXNzaW9uOiAnYWN0aXZlJyB9XG4gICAgICAgIF1cbiAgICB9O1xuICAgIHJldHVybiBhY3Rpb247XG59O1xuY29uc3QgX21pbnRBc3NldCA9IChhdXRob3IsIHBheWVyLCBjb2xfbmFtZSwgc2NoX25hbWUsIHRtcGxfaWQsIGltbXV0YWJsZV9kYXRhLCBtdXRhYmxlX2RhdGEpID0+IHtcbiAgICBjb25zdCBhY3Rpb24gPSB7XG4gICAgICAgIGFjY291bnQ6ICdhdG9taWNhc3NldHMnLFxuICAgICAgICBuYW1lOiAnbWludGFzc2V0JyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgYXV0aG9yaXplZF9taW50ZXI6IGF1dGhvcixcbiAgICAgICAgICAgIGNvbGxlY3Rpb25fbmFtZTogY29sX25hbWUsXG4gICAgICAgICAgICBzY2hlbWFfbmFtZTogc2NoX25hbWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZV9pZDogdG1wbF9pZCxcbiAgICAgICAgICAgIG5ld19hc3NldF9vd25lcjogYXV0aG9yLFxuICAgICAgICAgICAgaW1tdXRhYmxlX2RhdGE6IGltbXV0YWJsZV9kYXRhLFxuICAgICAgICAgICAgbXV0YWJsZV9kYXRhOiBtdXRhYmxlX2RhdGEsXG4gICAgICAgICAgICB0b2tlbnNfdG9fYmFjazogW10gLy90b2tlbnMgdG8gYmFjayBcbiAgICAgICAgfSxcbiAgICAgICAgYXV0aG9yaXphdGlvbjogW1xuICAgICAgICAgICAgeyBhY3RvcjogYXV0aG9yLCBwZXJtaXNzaW9uOiAnYWN0aXZlJyB9XG4gICAgICAgIF1cbiAgICB9O1xuICAgIHJldHVybiBhY3Rpb247XG59O1xuY29uc3QgX2NyZWF0ZVBvb2wgPSAoY3JlYXRvciwgcGF5ZXIsIGRlc2NyID0gY3JlYXRvciArICcgcG9vbCcpID0+IHtcbiAgICBjb25zdCBhY3Rpb24gPSB7XG4gICAgICAgIGFjY291bnQ6ICdwb29scy5uY28nLFxuICAgICAgICBuYW1lOiAnY3JlYXRlcG9vbCcsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG93bmVyOiBjcmVhdG9yLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyLFxuICAgICAgICB9LFxuICAgICAgICBhdXRob3JpemF0aW9uOiBbXG4gICAgICAgICAgICB7IGFjdG9yOiBjcmVhdG9yLCBwZXJtaXNzaW9uOiAnYWN0aXZlJyB9XG4gICAgICAgIF1cbiAgICB9O1xuICAgIHJldHVybiBhY3Rpb247XG59O1xuY29uc3QgX3N0YWtlVG9Qb29sID0gKGZyb20sIGlkLCBhbXQpID0+IHtcbiAgICBjb25zdCBhY3Rpb24gPSB7XG4gICAgICAgIGFjY291bnQ6ICdlb3Npby50b2tlbicsXG4gICAgICAgIG5hbWU6ICd0cmFuc2ZlcicsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGZyb206IGZyb20sXG4gICAgICAgICAgICB0bzogJ3Bvb2xzLm5jbycsXG4gICAgICAgICAgICBxdWFudGl0eTogYW10LFxuICAgICAgICAgICAgbWVtbzogXCJwb29sOlwiICsgaWQgLy8ncG9vbDoxJ1xuICAgICAgICB9LFxuICAgICAgICBhdXRob3JpemF0aW9uOiBbXG4gICAgICAgICAgICB7ICdhY3Rvcic6IGZyb20sICdwZXJtaXNzaW9uJzogJ2FjdGl2ZScgfVxuICAgICAgICBdXG4gICAgfTtcbiAgICByZXR1cm4gYWN0aW9uO1xufTtcbmNvbnN0IF90eE5jb0JhbGFuY2UgPSAoZnJvbSwgdG8sIGFtdCwgbWVtbyA9ICcnKSA9PiB7XG4gICAgY29uc3QgYWN0aW9uID0ge1xuICAgICAgICBhY2NvdW50OiAnZW9zaW8udG9rZW4nLFxuICAgICAgICBuYW1lOiAndHJhbnNmZXInLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBmcm9tOiBmcm9tLFxuICAgICAgICAgICAgdG86IHRvLFxuICAgICAgICAgICAgcXVhbnRpdHk6IGFtdCxcbiAgICAgICAgICAgIG1lbW86IG1lbW8gLy8nJ1xuICAgICAgICB9LFxuICAgICAgICBhdXRob3JpemF0aW9uOiBbXG4gICAgICAgICAgICB7ICdhY3Rvcic6IGZyb20sICdwZXJtaXNzaW9uJzogJ2FjdGl2ZScgfVxuICAgICAgICBdXG4gICAgfTtcbiAgICByZXR1cm4gYWN0aW9uO1xufTtcbmNvbnN0IFN1Ym1pdFR4ID0gKGFjdGlvbnMsIHB1YmxpY19rZXlzLCAvLyB0ZXN0bmV0IFtcIkVPUzVQVTkyQ3VwenhXRXV2VE1jQ05yM0c2OXI0VmNoM2JtWURyY3pOU0h4NUxiTlJZN05UXCJdXG5wcml2YXRlX2tleXMsIC8vIHRlc3RuZXQgW1wiNUtkUndNVXJrRnNzSzJuVVhBU25oempzTjFyTk5peThiWEFKb0hZYkJnSk1MemppWEhWXCJdXG5uZXRfdXJsID0gJ2h0dHBzOi8vdGVzdG5ldC5uZXdjb2luLm9yZycpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIGNvbnN0IHNpZ25hdHVyZVByb3ZpZGVyID0gbmV3IGVvc2pzX2pzc2lnXzEuSnNTaWduYXR1cmVQcm92aWRlcihwcml2YXRlX2tleXMpO1xuICAgIHNpZ25hdHVyZVByb3ZpZGVyLmF2YWlsYWJsZUtleXMgPSBwdWJsaWNfa2V5cztcbiAgICAvL0B0cy1pZ25vcmVcbiAgICBjb25zdCBycGMgPSBuZXcgZW9zanNfMS5Kc29uUnBjKG5ldF91cmwsIHsgZmV0Y2g6IGNyb3NzX2ZldGNoXzEuZGVmYXVsdCB9KTsgLy9yZXF1aXJlZCB0byByZWFkIGJsb2NrY2hhaW4gc3RhdGVcbiAgICBjb25zdCBhcGkgPSBuZXcgZW9zanNfMS5BcGkoeyBycGMsIHNpZ25hdHVyZVByb3ZpZGVyIH0pOyAvL3JlcXVpcmVkIHRvIHN1Ym1pdCB0cmFuc2FjdGlvbnNcbiAgICBjb25zdCBpbmZvID0geWllbGQgcnBjLmdldF9pbmZvKCk7XG4gICAgY29uc3QgbGFzdEJsb2NrSW5mbyA9IHlpZWxkIHJwYy5nZXRfYmxvY2soaW5mby5sYXN0X2lycmV2ZXJzaWJsZV9ibG9ja19udW0pO1xuICAgIGNvbnN0IHR6T2ZmID0gbmV3IERhdGUoaW5mby5oZWFkX2Jsb2NrX3RpbWUpLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgdmFyIHQgPSBuZXcgRGF0ZSgobmV3IERhdGUoaW5mby5oZWFkX2Jsb2NrX3RpbWUpKS5nZXRUaW1lKCkgKyAxMCAqIDYwICogMTAwMCAtIHR6T2ZmICogMTAwMCAqIDYwKS50b0lTT1N0cmluZygpLnNsaWNlKDAsIC0xKTsgLy8rMTBtXG4gICAgY29uc3QgdHJhbnNhY3Rpb25PYmogPSB7XG4gICAgICAgIGFjdGlvbnM6IGFjdGlvbnMsXG4gICAgICAgIGV4cGlyYXRpb246IHQsXG4gICAgICAgIHJlZl9ibG9ja19wcmVmaXg6IGxhc3RCbG9ja0luZm8ucmVmX2Jsb2NrX3ByZWZpeCxcbiAgICAgICAgcmVmX2Jsb2NrX251bTogbGFzdEJsb2NrSW5mby5ibG9ja19udW0gJiAweGZmZmYsIC8vIDIyNzc0XG4gICAgfTtcbiAgICBjb25zdCBhID0geWllbGQgYXBpLnNlcmlhbGl6ZUFjdGlvbnModHJhbnNhY3Rpb25PYmouYWN0aW9ucyk7XG4gICAgY29uc3QgdHJhbnNhY3Rpb24gPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRyYW5zYWN0aW9uT2JqKSwgeyBhY3Rpb25zOiBhIH0pO1xuICAgIGNvbnN0IHNlcmlhbGl6ZWRUcmFuc2FjdGlvbiA9IGFwaS5zZXJpYWxpemVUcmFuc2FjdGlvbih0cmFuc2FjdGlvbik7XG4gICAgY29uc3QgYXZhaWxhYmxlS2V5cyA9IHlpZWxkIGFwaS5zaWduYXR1cmVQcm92aWRlci5nZXRBdmFpbGFibGVLZXlzKCk7XG4gICAgY29uc3QgcmVxdWlyZWRLZXlzID0geWllbGQgYXBpLmF1dGhvcml0eVByb3ZpZGVyLmdldFJlcXVpcmVkS2V5cyh7IHRyYW5zYWN0aW9uLCBhdmFpbGFibGVLZXlzIH0pO1xuICAgIGNvbnN0IGFiaXMgPSB5aWVsZCBhcGkuZ2V0VHJhbnNhY3Rpb25BYmlzKHRyYW5zYWN0aW9uKTtcbiAgICAvLyBjb25zdCBwdXNoVHJhbnNhY3Rpb25BcmdzOiBQdXNoVHJhbnNhY3Rpb25BcmdzID0geyBzZXJpYWxpemVkVHJhbnNhY3Rpb24sIHNpZ25hdHVyZXMgfTtcbiAgICBjb25zdCBwdXNoVHJhbnNhY3Rpb25BcmdzID0geWllbGQgYXBpLnNpZ25hdHVyZVByb3ZpZGVyLnNpZ24oe1xuICAgICAgICBjaGFpbklkOiBpbmZvLmNoYWluX2lkLFxuICAgICAgICByZXF1aXJlZEtleXM6IHJlcXVpcmVkS2V5cyxcbiAgICAgICAgc2VyaWFsaXplZFRyYW5zYWN0aW9uOiBzZXJpYWxpemVkVHJhbnNhY3Rpb24sXG4gICAgICAgIHNlcmlhbGl6ZWRDb250ZXh0RnJlZURhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgYWJpczogYWJpc1xuICAgIH0pO1xuICAgIC8qXG4gICAgbGV0IHRyICA9IHNlcmlhbGl6ZWRUcmFuc2FjdGlvbi5idWZmZXIudG9TdHJpbmcoKTtcbiAgICBsZXQgZWNjc3QgPSBlY2Muc2lnbihzZXJpYWxpemVkVHJhbnNhY3Rpb24sIHByaXZhdGVfa2V5c1swXSk7XG4gICAgbGV0IHB1Yl9mcm9tX3BydiA9IGVjYy5wcml2YXRlVG9QdWJsaWMocHJpdmF0ZV9rZXlzWzBdKTtcbiAgICBsZXQgc2lnID0gcHVzaFRyYW5zYWN0aW9uQXJncy5zaWduYXR1cmVzWzBdO1xuICAgIGxldCBrZXkgPSBlY2MucmVjb3ZlcihzaWcsIHRyKTtcbiAgICBsZXQgYyA9IGVjYy52ZXJpZnkoc2lnLCB0ciwgcHVibGljX2tleXNbMF0pO1xuICAgIGNvbnNvbGUubG9nKFwic2lnbmF0dXJlIHZlcmlmaWNhdGlvbjogcmV0dXJuICVkXCIsIGMpKi9cbiAgICByZXR1cm4gYXBpLnB1c2hTaWduZWRUcmFuc2FjdGlvbihwdXNoVHJhbnNhY3Rpb25BcmdzKTtcbn0pO1xuY29uc3QgQ1JFQVRFX0FDQ09VTlRfREVGQVVMVFMgPSB7XG4gICAgcmFtX2FtdDogODE5MixcbiAgICBjcHVfYW1vdW50OiAnMTAwLjAwMDAgTkNPJyxcbiAgICBuZXRfYW1vdW50OiAnMTAwLjAwMDAgTkNPJyxcbiAgICB4ZmVyOiBmYWxzZSxcbn07XG4vKipcbiAqIFRoZSBwcmltYXJ5IHRvb2wgdG8gaW50ZXJhY3Qgd2l0aCBbaHR0cHM6Ly9uZXdjb2luLm9yZ10obmV3Y29pbi5vcmcpLlxuICpcbiAqIFRoaXMgaXMgYW4gZWFybHkgYWxwaGEuXG4gKlxuICogU2VlIFtodHRwczovL2RvY3MubmV3Y29pbi5vcmcvXShodHRwczovL2RvY3MubmV3Y29pbi5vcmcvKSBmb3IgYW4gb3ZlcnZpZXcgb2YgdGhlIG5ld2NvaW4gZWNvc3lzdGVtLlxuICovXG5jbGFzcyBOQ09fQmxvY2tjaGFpbkFQSSB7XG4gICAgLyoqXG4gICAgICogSW5pdCB0aGUgYXBpXG4gICAgICogQG5hbWUgbmV3Y29pbi1hcGlcbiAgICAgKiBAcGFyYW0gYmNfdXJsIC0gbmV3Y29pbiB1cmwgLSBodHRwOi8vdGVzdG5ldC5uZXdjb2luLm9yZ1xuICAgICAqIEBwYXJhbSBoeXBfdXJsIC0gaHlwZXJpb24gdXJsIC0gaHR0cDovL2h5cGVyaW9uLm5ld2NvaW4ub3JnXG4gICAgICogQHJldHVybnMgYSBOZXdjb2luIEFQSSBpbnN0YW5jZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHsgYmNfdXJsLCBoeXBfdXJsIH0pIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLl91cmwgPSBcIlwiO1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMuX2hfdXJsID0gXCJcIjtcbiAgICAgICAgdGhpcy5fdXJsID0gYmNfdXJsO1xuICAgICAgICB0aGlzLl9oX3VybCA9IGh5cF91cmw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGtleSBwYWlyIGFzc3VtaW5nIGEgc2VjdXJlIGVudmlyb25tZW50IChub3QgZnJvbnRlbmQpXG4gICAgICogQHJldHVybnMgQSBrZXkgcGFpclxuICAgICAqL1xuICAgIGNyZWF0ZUtleVBhaXIoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCBlb3Nqc19lY2NfcHJpdmVvc18xLmRlZmF1bHQuaW5pdGlhbGl6ZSgpO1xuICAgICAgICAgICAgbGV0IG9wdHMgPSB7IHNlY3VyZUVudjogdHJ1ZSB9O1xuICAgICAgICAgICAgbGV0IHAgPSB5aWVsZCBlb3Nqc19lY2NfcHJpdmVvc18xLmRlZmF1bHQucmFuZG9tS2V5KDAsIG9wdHMpO1xuICAgICAgICAgICAgLy9sZXQgeCA9IGVjYy5pc1ZhbGlkUHJpdmF0ZShwKTtcbiAgICAgICAgICAgIGxldCB0ID0geyBwcnZfa2V5OiBwLCBwdWJfa2V5OiBlb3Nqc19lY2NfcHJpdmVvc18xLmRlZmF1bHQucHJpdmF0ZVRvUHVibGljKHApIH07XG4gICAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHVzZXJcbiAgICAgKiBAcmV0dXJucyBDcmVhdGUgVXNlciB0cmFuc2FjdGlvbiBpZFxuICAgICAqL1xuICAgIGNyZWF0ZVVzZXIoaW5wdCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgeyBuZXdVc2VyLCBuZXdhY2NfcHViX2FjdGl2ZV9rZXksIG5ld2FjY19wdWJfb3duZXJfa2V5LCBwYXllciwgcGF5ZXJfcHJ2X2tleSwgcmFtX2FtdCwgbmV0X2Ftb3VudCwgY3B1X2Ftb3VudCwgeGZlciB9ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBDUkVBVEVfQUNDT1VOVF9ERUZBVUxUUyksIGlucHQpO1xuICAgICAgICAgICAgbGV0IHQ7XG4gICAgICAgICAgICBsZXQgcmVzID0ge307XG4gICAgICAgICAgICBsZXQgdHJlcztcbiAgICAgICAgICAgIGxldCBuZXdhY2NfYWN0aW9uID0gX25ld2FjY291bnQobmV3VXNlciwgcGF5ZXIsIG5ld2FjY19wdWJfYWN0aXZlX2tleSwgbmV3YWNjX3B1Yl9vd25lcl9rZXkpO1xuICAgICAgICAgICAgbGV0IGJ1eXJhbV9hY3Rpb24gPSBfYnV5cmFtYnl0ZXMobmV3VXNlciwgcGF5ZXIsIHJhbV9hbXQpO1xuICAgICAgICAgICAgbGV0IGRlbGVnYXRlYndfYWN0aW9uID0gX2RlbGVnYXRlQncobmV3VXNlciwgcGF5ZXIsIG5ldF9hbW91bnQsIGNwdV9hbW91bnQsIHhmZXIpO1xuICAgICAgICAgICAgbGV0IHBheWVyX3B1Yl9rZXkgPSBlb3Nqc19lY2NfcHJpdmVvc18xLmRlZmF1bHQucHJpdmF0ZVRvUHVibGljKHBheWVyX3Bydl9rZXkpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJiZWZvcmUgY3JlYXRlIGFjY291bnQgdHJhbnNhY3Rpb25cIik7XG4gICAgICAgICAgICB0cmVzID0gKHlpZWxkIFN1Ym1pdFR4KFtuZXdhY2NfYWN0aW9uLCBidXlyYW1fYWN0aW9uLCBkZWxlZ2F0ZWJ3X2FjdGlvbl0sIFtwYXllcl9wdWJfa2V5XSwgW3BheWVyX3Bydl9rZXldLCB0aGlzLl91cmwpKTsgLy8gW10gY29udGFpbmVkICAgICAgXG4gICAgICAgICAgICByZXMuVHhJRF9jcmVhdGVBY2MgPSB0cmVzLnRyYW5zYWN0aW9uX2lkO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjcmVhdGV1c2VyIHRyYW5zYWN0aW9uIGNvbXBsZXRlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBjb2xsZWN0aW9uXG4gICAgICogQHJldHVybnMgQ3JlYXRlIENvbGxlY3Rpb24gYW5kIHRlbXBsYXRlIHRyYW5zYWN0aW9ucycgaWRzXG4gICAgICovXG4gICAgY3JlYXRlQ29sbGVjdGlvbihpbnB0KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBsZXQgdDtcbiAgICAgICAgICAgIGxldCByZXMgPSB7fTtcbiAgICAgICAgICAgIGxldCB0cmVzO1xuICAgICAgICAgICAgbGV0IGQgPSAxMiAtIGlucHQudXNlci5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoaW5wdC5jb2xsZWN0aW9uX25hbWUgPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGlucHQuY29sbGVjdGlvbl9uYW1lID0gKDAsIHV0aWxzXzEubm9ybWFsaXplVXNlcm5hbWUpKGlucHQudXNlciwgXCJ6XCIpOyAvLyhpbnB0LmNyZWF0b3IpLnJlcGxhY2UoJy4nLCAneicgKyAneicucmVwZWF0KGQpKTtcbiAgICAgICAgICAgIGlmIChpbnB0LnNjaGVtYV9uYW1lID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBpbnB0LnNjaGVtYV9uYW1lID0gKDAsIHV0aWxzXzEubm9ybWFsaXplVXNlcm5hbWUpKGlucHQudXNlciwgXCJ3XCIpOyAvLyAoaW5wdC5jcmVhdG9yKS5yZXBsYWNlKCcuJywgJ3cnICsgJ3cnLnJlcGVhdChkKSk7XG4gICAgICAgICAgICBsZXQgdXNlcl9wdWJsaWNfYWN0aXZlX2tleSA9IGVvc2pzX2VjY19wcml2ZW9zXzEuZGVmYXVsdC5wcml2YXRlVG9QdWJsaWMoaW5wdC51c2VyX3Bydl9hY3RpdmVfa2V5KTtcbiAgICAgICAgICAgIGxldCBta3RfZmVlID0gaW5wdC5ta3RfZmVlID8gaW5wdC5ta3RfZmVlIDogMC4wNTtcbiAgICAgICAgICAgIGxldCBhbGxvd19ub3RpZnkgPSBpbnB0LmFsbG93X25vdGlmeSA/IGlucHQuYWxsb3dfbm90aWZ5IDogdHJ1ZTtcbiAgICAgICAgICAgIHQgPSBfY3JlYXRlQ29sbGVjdGlvbihpbnB0LnVzZXIsIGlucHQuY29sbGVjdGlvbl9uYW1lLCBbaW5wdC51c2VyXSwgW2lucHQudXNlcl0sIG1rdF9mZWUsIGFsbG93X25vdGlmeSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY3JlYXRlY29sIHRyYW5zYWN0aW9uXCIpO1xuICAgICAgICAgICAgdHJlcyA9ICh5aWVsZCBTdWJtaXRUeChbdF0sIFt1c2VyX3B1YmxpY19hY3RpdmVfa2V5XSwgW2lucHQudXNlcl9wcnZfYWN0aXZlX2tleV0sIHRoaXMuX3VybCkpO1xuICAgICAgICAgICAgcmVzLlR4SURfY3JlYXRlQ29sID0gdHJlcy50cmFuc2FjdGlvbl9pZDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY3JlYXRpbmcgc2NoZW1hXCIpO1xuICAgICAgICAgICAgbGV0IHNjaGVtYV9maWVsZHMgPSBpbnB0LnNjaGVtYV9maWVsZHMgPyBpbnB0LnNjaGVtYV9maWVsZHMgOiB0eXBlc18xLmRlZmF1bHRfc2NoZW1hO1xuICAgICAgICAgICAgdCA9IF9jcmVhdGVTY2goaW5wdC51c2VyLCBpbnB0LnVzZXIsIGlucHQuY29sbGVjdGlvbl9uYW1lLCBpbnB0LnNjaGVtYV9uYW1lLCBzY2hlbWFfZmllbGRzKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHQpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjcmVhdGVzY2ggdHJhbnNhY3Rpb25cIik7XG4gICAgICAgICAgICB0cmVzID0gKHlpZWxkIFN1Ym1pdFR4KFt0XSwgW3VzZXJfcHVibGljX2FjdGl2ZV9rZXldLCBbaW5wdC51c2VyX3Bydl9hY3RpdmVfa2V5XSwgdGhpcy5fdXJsKSk7XG4gICAgICAgICAgICByZXMuVHhJRF9jcmVhdGVTY2ggPSB0cmVzLnRyYW5zYWN0aW9uX2lkO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjcmVhdGluZyB0ZW1wbGF0ZVwiKTtcbiAgICAgICAgICAgIGxldCB0ZW1wbGF0ZSA9IGlucHQudGVtcGxhdGVfZmllbGRzID8gaW5wdC50ZW1wbGF0ZV9maWVsZHMgOiBbXTtcbiAgICAgICAgICAgIGxldCB4ZmVyYWJsZSA9IGlucHQueGZlcmFibGUgPyBpbnB0LnhmZXJhYmxlIDogdHJ1ZTtcbiAgICAgICAgICAgIGxldCBidXJuYWJsZSA9IGlucHQuYnVybmFibGUgPyBpbnB0LmJ1cm5hYmxlIDogdHJ1ZTtcbiAgICAgICAgICAgIGxldCBtYXhfc3VwcGx5ID0gaW5wdC5tYXhfc3VwcGx5ID8gaW5wdC5tYXhfc3VwcGx5IDogMHhmZmZmZmY7XG4gICAgICAgICAgICB0ID0gX2NyZWF0ZVRtcGwoaW5wdC51c2VyLCBpbnB0LmNvbGxlY3Rpb25fbmFtZSwgaW5wdC5zY2hlbWFfbmFtZSwgeGZlcmFibGUsIGJ1cm5hYmxlLCBtYXhfc3VwcGx5LCB0ZW1wbGF0ZSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY3JlYXRpbmcgdGVtcGxhdGUgdHJhbnNhY3Rpb25cIik7XG4gICAgICAgICAgICB0cmVzID0gKHlpZWxkIFN1Ym1pdFR4KFt0XSwgW3VzZXJfcHVibGljX2FjdGl2ZV9rZXldLCBbaW5wdC51c2VyX3Bydl9hY3RpdmVfa2V5XSwgdGhpcy5fdXJsKSk7XG4gICAgICAgICAgICByZXMuVHhJRF9jcmVhdGVUcGwgPSByZXMuVHhJRF9jcmVhdGVUcGw7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IHBlcm1pc3Npb24gc3ViamVjdCB0byBBY3RpdmUgcGVybWlzc2lvbi5cbiAgICAgKiBAcmV0dXJucyBDcmVhdGUgcGVybWlzc2lvbiB0cmFuc2FjdGlvbiBpZFxuICAgICAqL1xuICAgIGNyZWF0ZVBlcm1pc3Npb24oaW5wdCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgbGV0IHQgPSBfY3JlYXRlUGVybWlzc2lvbihpbnB0LmF1dGhvciwgaW5wdC5wZXJtX25hbWUsIGlucHQucGVybV9wdWJfa2V5KTtcbiAgICAgICAgICAgIGxldCByZXMgPSB5aWVsZCBTdWJtaXRUeChbdF0sIFtlb3Nqc19lY2NfcHJpdmVvc18xLmRlZmF1bHQucHJpdmF0ZVRvUHVibGljKGlucHQuYXV0aG9yX3Bydl9hY3RpdmVfa2V5KV0sIFtpbnB0LmF1dGhvcl9wcnZfYWN0aXZlX2tleV0sIHRoaXMuX3VybCk7XG4gICAgICAgICAgICBsZXQgciA9IHt9O1xuICAgICAgICAgICAgci5UeElEX2NyZWF0ZVBlcm0gPSByZXMudHJhbnNhY3Rpb25faWQ7XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpbmsgYSBwZXJtaXNzaW9uIHRvIGEgc3BlY2lmaWMgYWN0aW9uIG9mIGEgc3BlY2lmaWMgY29udHJhY3QuXG4gICAgICogQHJldHVybnMgTGluayBwZXJtaXNzaW9uIHRyYW5zYWN0aW9uIGlkXG4gICAgICovXG4gICAgbGlua1Blcm1pc3Npb24oaW5wdCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgbGlua2F1dGhfaW5wdXQgPSB7XG4gICAgICAgICAgICAgICAgYWNjb3VudDogaW5wdC5hdXRob3IsXG4gICAgICAgICAgICAgICAgY29kZTogaW5wdC5hY3Rpb25fb3duZXIsXG4gICAgICAgICAgICAgICAgdHlwZTogaW5wdC5hY3Rpb25fdG9fbGluayxcbiAgICAgICAgICAgICAgICByZXF1aXJlbWVudDogaW5wdC5wZXJtX3RvX2xpbmssIC8vICdhY3RpdmUnLCAnb3duZXInIC4uLiBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyB0aGUgYWN0aW9uIHdoaWNoIHdpbGwgbWFrZSB0aGUgbGlua2luZyBcbiAgICAgICAgICAgIGxldCBhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgYWNjb3VudDogJ2Vvc2lvJyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnbGlua2F1dGgnLFxuICAgICAgICAgICAgICAgIGRhdGE6IGxpbmthdXRoX2lucHV0LFxuICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb246IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RvcjogaW5wdC5hdXRob3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBwZXJtaXNzaW9uOiAnYWN0aXZlJ1xuICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGxldCByZXMgPSB5aWVsZCBTdWJtaXRUeChbYWN0aW9uXSwgW2Vvc2pzX2VjY19wcml2ZW9zXzEuZGVmYXVsdC5wcml2YXRlVG9QdWJsaWMoaW5wdC5hdXRob3JfcHJ2X2FjdGl2ZV9rZXkpXSwgW2lucHQuYXV0aG9yX3Bydl9hY3RpdmVfa2V5XSwgdGhpcy5fdXJsKTtcbiAgICAgICAgICAgIGxldCByID0ge307XG4gICAgICAgICAgICByLlR4SURfbGlua1Blcm0gPSByZXMudHJhbnNhY3Rpb25faWQ7XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHN0YWtpbmcgcG9vbC5cbiAgICAgKiBAcmV0dXJucyBDcmVhdGUgUG9vbCB0cmFuc2FjdGlvbiBpZFxuICAgICAqL1xuICAgIGNyZWF0ZVBvb2woaW5wdCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgbGV0IHQgPSBfY3JlYXRlUG9vbChpbnB0Lm93bmVyLCBcInRlc3QgcG9vbCBmb3IgXCIgKyBpbnB0Lm93bmVyKTtcbiAgICAgICAgICAgIGxldCByZXMgPSB5aWVsZCBTdWJtaXRUeChbdF0sIFtlb3Nqc19lY2NfcHJpdmVvc18xLmRlZmF1bHQucHJpdmF0ZVRvUHVibGljKGlucHQub3duZXJfcHJ2X2FjdGl2ZV9rZXkpXSwgW2lucHQub3duZXJfcHJ2X2FjdGl2ZV9rZXldLCB0aGlzLl91cmwpO1xuICAgICAgICAgICAgbGV0IHIgPSB7fTtcbiAgICAgICAgICAgIHIuVHhJRF9jcmVhdGVQb29sID0gcmVzLnRyYW5zYWN0aW9uX2lkO1xuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFrZSB0byBwb29sXG4gICAgICogQHJldHVybnMgQ3JlYXRlIFBvb2wgdHJhbnNhY3Rpb24gaWRcbiAgICAgKi9cbiAgICBzdGFrZVRvUG9vbChpbnB0KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBhcGkgPSBuZXcgbmV3Y29pbl9wb29sc19qc18xLlJwY0FwaSh0aGlzLl91cmwsIFwicG9vbHMubmNvXCIsIGNyb3NzX2ZldGNoXzEuZGVmYXVsdCk7XG4gICAgICAgICAgICBsZXQgcCA9IHsgb3duZXI6IGlucHQudG8gfTtcbiAgICAgICAgICAgIGxldCByID0ge307XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkdldCBwb29sYnlvd25lcjogXCIsIEpTT04uc3RyaW5naWZ5KHApKTtcbiAgICAgICAgICAgIGxldCBxID0geWllbGQgYXBpLmdldFBvb2xCeU93bmVyKHApO1xuICAgICAgICAgICAgbGV0IHQgPSB5aWVsZCBxLmpzb24oKTtcbiAgICAgICAgICAgIGxldCBwb29sX2lkID0gdC5yb3dzWzBdLmlkO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJwb29sOlwiICsgSlNPTi5zdHJpbmdpZnkodCkpO1xuICAgICAgICAgICAgbGV0IHR4ID0gX3N0YWtlVG9Qb29sKGlucHQucGF5ZXIsIHBvb2xfaWQsIGlucHQuYW10KTtcbiAgICAgICAgICAgIGxldCByZXMgPSB5aWVsZCBTdWJtaXRUeChbdHhdLCBbZW9zanNfZWNjX3ByaXZlb3NfMS5kZWZhdWx0LnByaXZhdGVUb1B1YmxpYyhpbnB0LnBheWVyX3Bydl9rZXkpXSwgW2lucHQucGF5ZXJfcHJ2X2tleV0sIHRoaXMuX3VybCk7XG4gICAgICAgICAgICByLlR4SURfc3Rha2VUb1Bvb2wgPSByZXMudHJhbnNhY3Rpb25faWQ7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHJlcyk7XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1pbnQgYW4gYXNzZXRcbiAgICAgKiBAcmV0dXJucyBDcmVhdGUgUG9vbCB0cmFuc2FjdGlvbiBpZFxuICAgICAqL1xuICAgIG1pbnRBc3NldChpbnB0KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBsZXQgZCA9IDEyIC0gaW5wdC5jcmVhdG9yLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChpbnB0LmNvbF9uYW1lID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBpbnB0LmNvbF9uYW1lID0gKDAsIHV0aWxzXzEubm9ybWFsaXplVXNlcm5hbWUpKGlucHQuY3JlYXRvciwgXCJ6XCIpOyAvLyhpbnB0LmNyZWF0b3IpLnJlcGxhY2UoJy4nLCAneicgKyAneicucmVwZWF0KGQpKTtcbiAgICAgICAgICAgIGlmIChpbnB0LnNjaF9uYW1lID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBpbnB0LnNjaF9uYW1lID0gKDAsIHV0aWxzXzEubm9ybWFsaXplVXNlcm5hbWUpKGlucHQuY3JlYXRvciwgXCJ3XCIpOyAvLyAoaW5wdC5jcmVhdG9yKS5yZXBsYWNlKCcuJywgJ3cnICsgJ3cnLnJlcGVhdChkKSk7XG4gICAgICAgICAgICBpZiAoaW5wdC50bXBsX2lkID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBpbnB0LnRtcGxfaWQgPSAtMTtcbiAgICAgICAgICAgIGlmIChpbnB0LmltbXV0YWJsZV9kYXRhID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBpbnB0LmltbXV0YWJsZV9kYXRhID0gW1xuICAgICAgICAgICAgICAgICAgICB7IGtleTogJ25hbWUnLCB2YWx1ZTogWydzdHJpbmcnLCBpbnB0LmNyZWF0b3IgKyAnXycgKyAobmV3IERhdGUoKSkuZ2V0VGltZSgpXSB9XG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmIChpbnB0Lm11dGFibGVfZGF0YSA9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgaW5wdC5tdXRhYmxlX2RhdGEgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBfbWludEFzc2V0KGlucHQuY3JlYXRvciwgaW5wdC5wYXllciwgaW5wdC5jb2xfbmFtZSwgaW5wdC5zY2hfbmFtZSwgaW5wdC50bXBsX2lkLCBpbnB0LmltbXV0YWJsZV9kYXRhLCBpbnB0Lm11dGFibGVfZGF0YSk7XG4gICAgICAgICAgICBsZXQgcmVzID0geWllbGQgU3VibWl0VHgoW3RdLCBbZW9zanNfZWNjX3ByaXZlb3NfMS5kZWZhdWx0LnByaXZhdGVUb1B1YmxpYyhpbnB0LnBheWVyX3Bydl9rZXkpXSwgW2lucHQucGF5ZXJfcHJ2X2tleV0sIHRoaXMuX3VybCk7XG4gICAgICAgICAgICBsZXQgciA9IHt9O1xuICAgICAgICAgICAgci5UeElEX21pbnRBc3NldCA9IHJlcy50cmFuc2FjdGlvbl9pZDtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRyYXNhY3Rpb24gZGF0YVxuICAgICAqIEByZXR1cm5zIFR4IGRhdGFcbiAgICAgKi9cbiAgICBnZXRUeERhdGEodHhpZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgaHJwYyA9IG5ldyBoeXBlcmlvbl8xLkpzb25ScGModGhpcy5faF91cmwsIHsgZmV0Y2g6IGNyb3NzX2ZldGNoXzEuZGVmYXVsdCB9KTtcbiAgICAgICAgICAgIGxldCB0eGkgPSB5aWVsZCBocnBjLmdldF90cmFuc2FjdGlvbih0eGlkKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHR4aSk7IC8vIGdldCB0ZW1wbGF0ZSBudW1iZXIgIHR4aS5hY3Rpb25zWzFdLmFjdC5kYXRhLnRlbXBsYXRlX2lkXG4gICAgICAgICAgICByZXR1cm4gdHhpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFjY291bnQgYmFsYW5jZVxuICAgICAqIEByZXR1cm5zIFR4IGRhdGFcbiAgICAgKi9cbiAgICBnZXRBY2NvdW50QmFsYW5jZShhY2MpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmIChhY2MuY29udHJhY3QgPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGFjYy5jb250cmFjdCA9ICdlb3Npby50b2tlbic7XG4gICAgICAgICAgICBsZXQgcmMgPSB7IGFjY19iYWxhbmNlczogW10gfTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IHQgPSB5aWVsZCAoMCwgY3Jvc3NfZmV0Y2hfMS5kZWZhdWx0KShgaHR0cHM6Ly90ZXN0bmV0Lm5ld2NvaW4ub3JnL3YxL2NoYWluL2dldF9jdXJyZW5jeV9iYWxhbmNlYCwge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnQ6IGFjYy5vd25lcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGFjYy5jb250cmFjdFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByYy5hY2NfYmFsYW5jZXMgPSB5aWVsZCB0Lmpzb24oKTtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHJjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcXG5DYXVnaHQgZXhjZXB0aW9uOiAnICsgZSk7XG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBlb3Nqc18xLlJwY0Vycm9yKVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShlLmpzb24sIG51bGwsIDIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zZmVyIE5DTyBiZXR3ZWVuIGFjY291bnRzXG4gICAgICogQHJldHVybnMgVHJhbnNmZXIgdHJhbnNhY3Rpb24gaWRcbiAgICAgKi9cbiAgICB0eE5jb0JhbGFuY2UoaW5wdCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgbGV0IHIgPSB7fTtcbiAgICAgICAgICAgIGxldCB0eCA9IF90eE5jb0JhbGFuY2UoaW5wdC5wYXllciwgaW5wdC50bywgaW5wdC5hbXQpO1xuICAgICAgICAgICAgbGV0IHJlcyA9IHlpZWxkIFN1Ym1pdFR4KFt0eF0sIFtpbnB0LnBheWVyX3B1Yl9rZXldLCBbaW5wdC5wYXllcl9wcnZfa2V5XSwgdGhpcy5fdXJsKTtcbiAgICAgICAgICAgIHIuVHhJRF90eE5jb0JhbGFuY2UgPSByZXMudHJhbnNhY3Rpb25faWQ7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHJlcyk7XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBwb29sIGluZm9cbiAgICAgKiBAcmV0dXJucyBUeCBkYXRhXG4gICAgICovXG4gICAgZ2V0UG9vbEluZm8ocGF5bG9hZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgYXBpID0gbmV3IG5ld2NvaW5fcG9vbHNfanNfMS5ScGNBcGkoXCJodHRwczovL3Rlc3RuZXQubmV3Y29pbi5vcmdcIiwgXCJwb29scy5uY29cIiwgY3Jvc3NfZmV0Y2hfMS5kZWZhdWx0KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZm4gPSBwYXlsb2FkLmNvZGUgPyBcImdldFBvb2xCeUNvZGVcIiA6IFwiZ2V0UG9vbEJ5T3duZXJcIjtcbiAgICAgICAgICAgICAgICBsZXQgcSA9IHlpZWxkIGFwaVtmbl0ocGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgbGV0IHQgPSB5aWVsZCBxLmpzb24oKTtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHQucm93c1swXSk7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyh0LnJvd3NbMF0udG90YWwpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXFxuQ2F1Z2h0IGV4Y2VwdGlvbjogJyArIGUpO1xuICAgICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgZW9zanNfMS5ScGNFcnJvcilcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZS5qc29uLCBudWxsLCAyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgICBgYDtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5OQ09fQmxvY2tjaGFpbkFQSSA9IE5DT19CbG9ja2NoYWluQVBJO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.ts\n");

/***/ }),

/***/ "./src/types.ts":
/*!**********************!*\
  !*** ./src/types.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ERC721_schema = exports.default_schema = void 0;\nexports.default_schema = [\n    { name: 'name', type: \"string\" },\n    { name: 'description', type: \"string\" },\n    { name: 'image', type: 'string' },\n    { name: 'external_url', type: 'string' },\n    { name: 'content_type', type: 'string' },\n    { name: 'content', type: 'string' },\n    { name: 'license', type: 'string' }\n];\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\nexports.ERC721_schema = [\n    { name: 'name', type: \"string\" },\n    { name: 'description', type: \"string\" },\n    { name: 'image', type: 'string' },\n];\n// https://docs.opensea.io/docs/metadata-standards\n// export const OpenSea_schema = [\n//]\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdHlwZXMudHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vTkNPX0Jsb2NrY2hhaW5BUEkvLi9zcmMvdHlwZXMudHM/MTFiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRVJDNzIxX3NjaGVtYSA9IGV4cG9ydHMuZGVmYXVsdF9zY2hlbWEgPSB2b2lkIDA7XG5leHBvcnRzLmRlZmF1bHRfc2NoZW1hID0gW1xuICAgIHsgbmFtZTogJ25hbWUnLCB0eXBlOiBcInN0cmluZ1wiIH0sXG4gICAgeyBuYW1lOiAnZGVzY3JpcHRpb24nLCB0eXBlOiBcInN0cmluZ1wiIH0sXG4gICAgeyBuYW1lOiAnaW1hZ2UnLCB0eXBlOiAnc3RyaW5nJyB9LFxuICAgIHsgbmFtZTogJ2V4dGVybmFsX3VybCcsIHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgeyBuYW1lOiAnY29udGVudF90eXBlJywgdHlwZTogJ3N0cmluZycgfSxcbiAgICB7IG5hbWU6ICdjb250ZW50JywgdHlwZTogJ3N0cmluZycgfSxcbiAgICB7IG5hbWU6ICdsaWNlbnNlJywgdHlwZTogJ3N0cmluZycgfVxuXTtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2Jsb2IvbWFzdGVyL0VJUFMvZWlwLTcyMS5tZFxuZXhwb3J0cy5FUkM3MjFfc2NoZW1hID0gW1xuICAgIHsgbmFtZTogJ25hbWUnLCB0eXBlOiBcInN0cmluZ1wiIH0sXG4gICAgeyBuYW1lOiAnZGVzY3JpcHRpb24nLCB0eXBlOiBcInN0cmluZ1wiIH0sXG4gICAgeyBuYW1lOiAnaW1hZ2UnLCB0eXBlOiAnc3RyaW5nJyB9LFxuXTtcbi8vIGh0dHBzOi8vZG9jcy5vcGVuc2VhLmlvL2RvY3MvbWV0YWRhdGEtc3RhbmRhcmRzXG4vLyBleHBvcnQgY29uc3QgT3BlblNlYV9zY2hlbWEgPSBbXG4vL11cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/types.ts\n");

/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.normalizeUsername = void 0;\nconst normalizeUsername = (username, r) => {\n    return username.replace(/\\./g, r + r.repeat(12 - username.length));\n};\nexports.normalizeUsername = normalizeUsername;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMudHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9OQ09fQmxvY2tjaGFpbkFQSS8uL3NyYy91dGlscy50cz9jNzExIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ub3JtYWxpemVVc2VybmFtZSA9IHZvaWQgMDtcbmNvbnN0IG5vcm1hbGl6ZVVzZXJuYW1lID0gKHVzZXJuYW1lLCByKSA9PiB7XG4gICAgcmV0dXJuIHVzZXJuYW1lLnJlcGxhY2UoL1xcLi9nLCByICsgci5yZXBlYXQoMTIgLSB1c2VybmFtZS5sZW5ndGgpKTtcbn07XG5leHBvcnRzLm5vcm1hbGl6ZVVzZXJuYW1lID0gbm9ybWFsaXplVXNlcm5hbWU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils.ts\n");

/***/ }),

/***/ "@eoscafe/hyperion":
/*!************************************!*\
  !*** external "@eoscafe/hyperion" ***!
  \************************************/
/***/ ((module) => {

module.exports = require("@eoscafe/hyperion");

/***/ }),

/***/ "@newcoin-foundation/newcoin.pools-js/":
/*!********************************************************!*\
  !*** external "@newcoin-foundation/newcoin.pools-js/" ***!
  \********************************************************/
/***/ ((module) => {

module.exports = require("@newcoin-foundation/newcoin.pools-js/");

/***/ }),

/***/ "atomicassets":
/*!*******************************!*\
  !*** external "atomicassets" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("atomicassets");

/***/ }),

/***/ "cross-fetch":
/*!******************************!*\
  !*** external "cross-fetch" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("cross-fetch");

/***/ }),

/***/ "eosjs":
/*!************************!*\
  !*** external "eosjs" ***!
  \************************/
/***/ ((module) => {

module.exports = require("eosjs");

/***/ }),

/***/ "eosjs-ecc-priveos":
/*!************************************!*\
  !*** external "eosjs-ecc-priveos" ***!
  \************************************/
/***/ ((module) => {

module.exports = require("eosjs-ecc-priveos");

/***/ }),

/***/ "eosjs/dist/eosjs-jssig":
/*!*****************************************!*\
  !*** external "eosjs/dist/eosjs-jssig" ***!
  \*****************************************/
/***/ ((module) => {

module.exports = require("eosjs/dist/eosjs-jssig");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	module.exports.NCO_BlockchainAPI = __webpack_exports__.NCO_BlockchainAPI;
/******/ 	
/******/ })()
;